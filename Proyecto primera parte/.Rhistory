dty = naive$residuals
par(mfrow=c(1,3))
par(mfrow=c(1,3))
plot(dty,type = 'l')
acf(dty)
pacf(dty)
library(tseries)
adf.test(dty, alternative = c("stationary"),
k = trunc((length(dty)-1)^(1/3)))
dty = naive$residuals
par(mfrow=c(1,3))
plot(dty,type = 'l')
acf(dty)
pacf(dty)
adf.test(dty, alternative = c("stationary"),
k = trunc((length(dty)-1)^(1/3)))
dly = diff(lgnp)
par(mfrow=c(1,3))
plot(dly,type='l')
acf(dly)
pacf(dly)
m1 = arima(dly, order = c(1, 0,0),include.mean = TRUE)
m2 = arima(dly, order = c(2, 0,0),include.mean = TRUE)
m3 = arima(dly, order = c(0, 0,1),include.mean = TRUE)
m4 = arima(dly, order = c(0, 0,2),include.mean = TRUE)
m1
m2
m3
m4
pm = predict(m1, n.ahead = 5, newxreg = NULL,
se.fit = TRUE)
p1_lev = exp(pm$pred[1]+log(rgdp)[T])
pm = predict(m1, n.ahead = 5, newxreg = NULL,
se.fit = TRUE)
## AIC = 2*n-2*lnL
## BIC/SIC/SBC/SBIC = ln(T)*n-2*lnL
pm = predict(m1, n.ahead = 5, newxreg = NULL,
se.fit = TRUE)
p1_lev = exp(pm$pred[1]+lgnp[T])
p2_lev = exp(sum(pm$pred[1:2])+lgnp[T])
p5_lev = exp(sum(pm$pred[1:5])+lgnp[T])
par(mfrow=c(1,1))
plot(lgnp,type='l',lwd=2,xlim=c(0,T+5),
ylim=c(min(lgnp),1.2*max(lgnp)))
lines(naive$fitted.values,lty=23)
points(T+1,p1_lev,col=2,pch=20)
points(T+2,p2_lev,col=2,pch=20)
points(T+5,p5_lev,col=2,pch=20)
## AIC = 2*n-2*lnL
## BIC/SIC/SBC/SBIC = ln(T)*n-2*lnL
pm = predict(m1, n.ahead = 5, newxreg = NULL,
se.fit = TRUE)
p1_lev = exp(pm$pred[1]+lgnp[T])
p2_lev = exp(sum(pm$pred[1:2])+lgnp[T])
p5_lev = exp(sum(pm$pred[1:5])+lgnp[T])
par(mfrow=c(1,1))
plot(c(lgnp),type='l',lwd=2,xlim=c(0,T+5),
ylim=c(min(lgnp),1.2*max(lgnp)))
lines(naive$fitted.values,lty=23)
points(T+1,p1_lev,col=2,pch=20)
points(T+2,p2_lev,col=2,pch=20)
points(T+5,p5_lev,col=2,pch=20)
points(T+1,p1_lev,col=2,pch=20)
## AIC = 2*n-2*lnL
## BIC/SIC/SBC/SBIC = ln(T)*n-2*lnL
pm = predict(m1, n.ahead = 5, newxreg = NULL,
se.fit = TRUE)
p1_lev = exp(pm$pred[1]+lgnp[T])
p2_lev = exp(sum(pm$pred[1:2])+lgnp[T])
p5_lev = exp(sum(pm$pred[1:5])+lgnp[T])
par(mfrow=c(1,1))
plot(c(lgnp),type='l',lwd=2,xlim=c(0,T+5),
ylim=c(min(lgnp),1.2*max(lgnp)))
lines(naive$fitted.values,lty=23)
points(T+1,p1_lev,col=2,pch=20)
points(T+2,p2_lev,col=2,pch=20)
points(T+5,p5_lev,col=2,pch=20)
load('US_RGDP.Rdata')
plot(date,rgdp,type='l',lwd=2)
T = length(rgdp)
t = seq(1,T)
t2 = t^2
t3 = t^3
naive = lm(rgdp ~ t+t2+t3)
naive
plot(rgdp,type='l',lwd=2)
lines(naive$fitted.values,lty=23)
dty = naive$residuals
par(mfrow=c(1,3))
plot(dty,type = 'l')
acf(dty)
pacf(dty)
library(tseries)
adf.test(dty, alternative = c("stationary"),
k = trunc((length(dty)-1)^(1/3)))
## but differencing does
dly = diff(log(rgdp))
par(mfrow=c(1,3))
plot(dly,type='l')
acf(dly)
pacf(dly)
m1 = arima(dly, order = c(1, 0,0),include.mean = TRUE)
m2 = arima(dly, order = c(2, 0,0),include.mean = TRUE)
m3 = arima(dly, order = c(0, 0,1),include.mean = TRUE)
m4 = arima(dly, order = c(0, 0,2),include.mean = TRUE)
m1
m2
m3
m4
pm = predict(m1, n.ahead = 5, newxreg = NULL,
se.fit = TRUE)
p1_lev = exp(pm$pred[1]+log(rgdp)[T])
p2_lev = exp(sum(pm$pred[1:2])+log(rgdp)[T])
p5_lev = exp(sum(pm$pred[1:5])+log(rgdp)[T])
par(mfrow=c(1,1))
plot(rgdp,type='l',lwd=2,xlim=c(0,T+5),
ylim=c(min(rgdp),1.2*max(rgdp)))
lines(naive$fitted.values,lty=23)
points(T+1,p1_lev,col=2,pch=20)
points(T+2,p2_lev,col=2,pch=20)
points(T+5,p5_lev,col=2,pch=20)
load("us_1960_2018.Rdata")
plot(lgnp,type='l',lwd=2)
T = length(lgnp)
t = seq(1,T)
t2 = t^2
t3 = t^3
naive = lm(lgnp ~ t+t2+t3)
naive
#Para generar el gráfico convertimos lgnp a vector, de esta manera se elimina el tipo serie temporal y permite pintar encima los valores del modelo. Ya que previamente no era posible.
plot(c(lgnp),type='l',lwd=2)
lines(naive$fitted.values,lty=23)
plot(lgnp,type='l',lwd=2)
T = length(lgnp)
t = seq(1,T)
t2 = t^2
t3 = t^3
#________________________
dly = diff(lgnp)
par(mfrow=c(1,3))
plot(dly,type='l')
acf(dly)
pacf(dly)
library(stats)
set.seed(357)
## Simulate data
y0 = 0
T  = 100
y  = rep(NA,T)
e  = rnorm(T,0,1)
y[1] = 0.7*y0+e[1]
for(t in 2:T){
y[t] = 0.7*y[t-1]+e[t]
}
par(mfrow=c(1,3))
ts.plot(y)
acfs  = acf(y)
pacfs = pacf(y)
acfs
pacfs
## Box and Jenkins confidence intervals
## s=1
c(acfs$acf[2]-2*T^{-1/2},acfs$acf[2]+2*T^{-1/2})
## s=2
sd2 = sqrt(1/T*(1+2*acfs$acf[2]^2))
c(acfs$acf[3]-2*sd2,acfs$acf[3]+2*sd2)
m1 = arima(y, order = c(1, 0,0),fixed=c(NA,0))
m2 = arima(y, order = c(1, 0,3),fixed=c(NA,0,0,NA,0))
par(mfrow=c(2,2))
ts.plot(m1$residuals)
ts.plot(m2$residuals)
pacf(m1$residuals)
pacf(m2$residuals)
grid = seq(-4,4,length=500)
par(mfrow=c(1,2))
hist(m1$residuals/sqrt(m1$sigma2),freq=FALSE)
lines(grid,dnorm(grid))
hist(m2$residuals/sqrt(m2$sigma2))
lines(grid,dnorm(grid))
ks.test(m1$residuals/sqrt(m1$sigma2),dnorm)
ks.test(m2$residuals/sqrt(m2$sigma2),dnorm)
Box.test(m1$residuals, lag = 8, type = c("Ljung-Box"))
Box.test(m1$residuals, lag = 16, type = c("Ljung-Box"))
Box.test(m1$residuals, lag = 24, type = c("Ljung-Box"))
Box.test(m2$residuals, lag = 8, type = c("Ljung-Box"))
Box.test(m2$residuals, lag = 16, type = c("Ljung-Box"))
Box.test(m2$residuals, lag = 24, type = c("Ljung-Box"))
load("us_1960_2018.Rdata")
plot(lgnp,type='l',lwd=2)
T = length(lgnp)
t = seq(1,T)
t2 = t^2
t3 = t^3
#________________________
dly = diff(lgnp)
par(mfrow=c(1,3))
plot(dly,type='l')
acf(dly)
pacf(dly)
naive = lm(lgnp ~ t+t2+t3)
naive
#Para generar el gráfico convertimos lgnp a vector, de esta manera se elimina el tipo serie temporal y permite pintar encima los valores del modelo. Ya que previamente no era posible.
plot(c(lgnp),type='l',lwd=2)
lines(naive$fitted.values,lty=23)
dty = naive$residuals
par(mfrow=c(1,3))
plot(dty,type = 'l')
acf(dty)
pacf(dty)
adf.test(dty, alternative = c("stationary"),
k = trunc((length(dty)-1)^(1/3)))
dly = diff(lgnp)
par(mfrow=c(1,3))
plot(dly,type='l')
acf(dly)
pacf(dly)
m1 = arima(dly, order = c(1, 0,0),include.mean = TRUE)
m2 = arima(dly, order = c(2, 0,0),include.mean = TRUE)
m3 = arima(dly, order = c(0, 0,1),include.mean = TRUE)
m4 = arima(dly, order = c(0, 0,2),include.mean = TRUE)
m1
m2
m3
m4
## AIC = 2*n-2*lnL
## BIC/SIC/SBC/SBIC = ln(T)*n-2*lnL
pm = predict(m2, n.ahead = 4, newxreg = NULL,
se.fit = TRUE)
p1_lev = exp(pm$pred[1]+lgnp[T])
p2_lev = exp(sum(pm$pred[1:2])+lgnp[T])
p5_lev = exp(sum(pm$pred[1:5])+lgnp[T])
par(mfrow=c(1,1))
plot(c(lgnp),type='l',lwd=2,xlim=c(0,T+5),
ylim=c(min(lgnp),1.2*max(lgnp)))
lines(naive$fitted.values,lty=23)
points(T+1,p1_lev,col=2,pch=20)
points(T+2,p2_lev,col=2,pch=20)
points(T+5,p5_lev,col=2,pch=20)
p1_lev = exp(pm$pred[4]+lgnp[T])
## AIC = 2*n-2*lnL
## BIC/SIC/SBC/SBIC = ln(T)*n-2*lnL
pm = predict(m2, n.ahead = 4, newxreg = NULL,
se.fit = TRUE)
p4_lev = exp(pm$pred[4]+lgnp[T])
par(mfrow=c(1,1))
plot(c(lgnp),type='l',lwd=2,xlim=c(0,T+5),
ylim=c(min(lgnp),1.2*max(lgnp)))
lines(naive$fitted.values,lty=23)
points(T+1,p1_lev,col=2,pch=20)
points(T+2,p2_lev,col=2,pch=20)
points(T+5,p5_lev,col=2,pch=20)
## AIC = 2*n-2*lnL
## BIC/SIC/SBC/SBIC = ln(T)*n-2*lnL
pm = predict(m2, n.ahead = 4, newxreg = NULL,
se.fit = TRUE)
p4_lev = exp(pm$pred[4]+lgnp[T])
par(mfrow=c(1,1))
plot(c(lgnp),type='l',lwd=2,xlim=c(0,T+5),
ylim=c(min(lgnp),1.2*max(lgnp)))
lines(naive$fitted.values,lty=23)
points(T+4,p4_lev,col=2,pch=20)
plot(c(lgnp),type='l',lwd=2,xlim=c(0,T+5),
ylim=c(min(lgnp),1.2*max(lgnp)))
lines(naive$fitted.values,lty=23)
points(T+4,p4_lev,col=2,pch=20)
## AIC = 2*n-2*lnL
## BIC/SIC/SBC/SBIC = ln(T)*n-2*lnL
pm = predict(m2, n.ahead = 4, newxreg = NULL,
se.fit = TRUE)
p4_lev = exp(pm$pred[4]+lgnp[T])
par(mfrow=c(1,1))
plot(c(lgnp),type='l',lwd=2,xlim=c(0,T+5),
ylim=c(min(lgnp),1.2*max(lgnp)))
lines(naive$fitted.values,lty=23)
points(p4_lev,col=2,pch=20)
T+4
p4_lev
naive$fitted.values
T+4
plot(c(lgnp),type='l',lwd=2,xlim=c(0,T+5),
ylim=c(min(lgnp),1.2*max(lgnp)))
lines(naive$fitted.values,lty=23)
points(T+4,p4_lev,col=2,pch=20)
T+4,p4_lev
points(T+4,p4_lev,col=2,pch=20)
plot(c(lgnp),type='l',lwd=2,xlim=c(0,T+5),
ylim=c(min(lgnp),1.2*max(lgnp)))
lines(naive$fitted.values,lty=23)
points(T+4,p4_lev,col=2,pch=20)
points(T+4,p4_lev,col=2,pch=20)
plot(c(lgnp),type='l',lwd=2,xlim=c(0,T+5),
ylim=c(min(lgnp),1.2*max(lgnp)))
lines(naive$fitted.values,lty=23)
points(T+4,p4_lev,col=2,pch=20)
plot(c(lgnp),type='l',lwd=2,xlim=c(0,T+5),
ylim=c(min(lgnp),1.2*max(lgnp)))
lines(naive$fitted.values,lty=23)
points(c(T+4,p4_lev),col=2,pch=20)
?points
## AIC = 2*n-2*lnL
## BIC/SIC/SBC/SBIC = ln(T)*n-2*lnL
pm = predict(m2, n.ahead = 4, newxreg = NULL,
se.fit = TRUE)
p4_lev = exp(pm$pred[4]+lgnp[T])
par(mfrow=c(1,1))
plot(c(lgnp),type='l',lwd=2,xlim=c(0,T+5),
ylim=c(min(lgnp),1.2*max(lgnp)))
lines(naive$fitted.values,lty=23)
points(T+4,p4_lev)
plot(c(lgnp),type='l',lwd=2,xlim=c(0,T+5),
ylim=c(min(lgnp),1.2*max(lgnp)))
lines(naive$fitted.values,lty=23)
points(x = T+4, y = p4_lev,col=2,pch=20)
plot(c(lgnp),type='l',lwd=2,xlim=c(0,T+5),
ylim=c(min(lgnp),1.2*max(lgnp)))
lines(naive$fitted.values,lty=23)
points(x = T+4, y = p4_lev,col=2,pch=20)
points(x = T+4, y = p4_lev,col=2,pch=20)
point(x = T+4, y = p4_lev,col=2,pch=20)
points(T+4, p4_lev,col=2,pch=20)
?exp
exp(pm$pred[4]+lgnp[T])
load('US_RGDP.Rdata')
plot(date,rgdp,type='l',lwd=2)
T = length(rgdp)
t = seq(1,T)
t2 = t^2
t3 = t^3
## deterministic trend
## cubic polynomial model
naive = lm(rgdp ~ t+t2+t3)
naive
plot(rgdp,type='l',lwd=2)
lines(naive$fitted.values,lty=23)
## simple de-trending does not make the series stationary
dty = naive$residuals
par(mfrow=c(1,3))
plot(dty,type = 'l')
acf(dty)
pacf(dty)
library(tseries)
adf.test(dty, alternative = c("stationary"),
k = trunc((length(dty)-1)^(1/3)))
## but differencing does
dly = diff(log(rgdp))
par(mfrow=c(1,3))
plot(dly,type='l')
acf(dly)
pacf(dly)
m1 = arima(dly, order = c(1, 0,0),include.mean = TRUE)
m2 = arima(dly, order = c(2, 0,0),include.mean = TRUE)
m3 = arima(dly, order = c(0, 0,1),include.mean = TRUE)
m4 = arima(dly, order = c(0, 0,2),include.mean = TRUE)
m1
m2
m3
m4
pm = predict(m1, n.ahead = 5, newxreg = NULL,
se.fit = TRUE)
exp(pm$pred[1]+log(rgdp)[T])
p1_lev = exp(pm$pred[1]+log(rgdp)[T])
p2_lev = exp(sum(pm$pred[1:2])+log(rgdp)[T])
p5_lev = exp(sum(pm$pred[1:5])+log(rgdp)[T])
par(mfrow=c(1,1))
plot(rgdp,type='l',lwd=2,xlim=c(0,T+5),
ylim=c(min(rgdp),1.2*max(rgdp)))
lines(naive$fitted.values,lty=23)
points(T+1,p1_lev,col=2,pch=20)
points(T+2,p2_lev,col=2,pch=20)
points(T+5,p5_lev,col=2,pch=20)
load("us_1960_2018.Rdata")
plot(lgnp,type='l',lwd=2)
T = length(lgnp)
t = seq(1,T)
t2 = t^2
t3 = t^3
#________________________
dly = diff(lgnp)
par(mfrow=c(1,3))
plot(dly,type='l')
acf(dly)
pacf(dly)
naive = lm(lgnp ~ t+t2+t3)
naive
#Para generar el gráfico convertimos lgnp a vector, de esta manera se elimina el tipo serie temporal y permite pintar encima los valores del modelo. Ya que previamente no era posible.
plot(c(lgnp),type='l',lwd=2)
lines(naive$fitted.values,lty=23)
dty = naive$residuals
par(mfrow=c(1,3))
plot(dty,type = 'l')
acf(dty)
pacf(dty)
adf.test(dty, alternative = c("stationary"),
k = trunc((length(dty)-1)^(1/3)))
dly = diff(lgnp)
par(mfrow=c(1,3))
plot(dly,type='l')
acf(dly)
pacf(dly)
m1 = arima(dly, order = c(1, 0,0),include.mean = TRUE)
m2 = arima(dly, order = c(2, 0,0),include.mean = TRUE)
m3 = arima(dly, order = c(0, 0,1),include.mean = TRUE)
m4 = arima(dly, order = c(0, 0,2),include.mean = TRUE)
m1
m2
m3
m4
pm = predict(m2, n.ahead = 4, newxreg = NULL,
se.fit = TRUE)
lgnp[T]
pm$pred[4]+lgnp[T]
exp(pm$pred[4]+lgnp[T])
p4_lev = pm$pred[4]+lgnp[T]
par(mfrow=c(1,1))
plot(c(lgnp),type='l',lwd=2,xlim=c(0,T+5),
ylim=c(min(lgnp),1.2*max(lgnp)))
lines(naive$fitted.values,lty=23)
## AIC = 2*n-2*lnL
## BIC/SIC/SBC/SBIC = ln(T)*n-2*lnL
pm = predict(m2, n.ahead = 4, newxreg = NULL,
se.fit = TRUE)
p4_lev = pm$pred[4]+lgnp[T]
par(mfrow=c(1,1))
plot(c(lgnp),type='l',lwd=2,xlim=c(0,T+5),
ylim=c(min(lgnp),1.2*max(lgnp)))
lines(naive$fitted.values,lty=23)
points(x = T+4, y = p4_lev,col=2,pch=20)
m1 = arima(dly, order = c(1, 0,0),include.mean = TRUE)
m2 = arima(dly, order = c(2, 0,0),include.mean = TRUE)
m3 = arima(dly, order = c(0, 0,1),include.mean = TRUE)
m4 = arima(dly, order = c(0, 0,2),include.mean = TRUE)
m1
m2
m3
m4
knitr::opts_chunk$set(echo = TRUE)
pm = predict(m2, n.ahead = 4, newxreg = NULL,
se.fit = TRUE)
p4_lev = pm$pred[4]+lgnp[T]
par(mfrow=c(1,1))
plot(c(lgnp),type='l',lwd=2,xlim=c(0,T+5),
ylim=c(min(lgnp),1.2*max(lgnp)))
lines(naive$fitted.values,lty=23)
points(x = T+4, y = p4_lev,col=2,pch=20)
pm = predict(m2, n.ahead = 4, newxreg = NULL,
se.fit = TRUE)
p4_lev = pm$pred[4]+lgnp[T]
par(mfrow=c(1,1))
plot(c(lgnp),type='l',lwd=2,xlim=c(0,T+5),
ylim=c(min(lgnp),1.2*max(lgnp)))
lines(naive$fitted.values,lty=23)
points(x = T+4, y = p4_lev,col=2,pch=20)
p4_lev
pm$pred[4]
lgnp[T]
pm$pred[4]
pm$pred[4]/lgnp[T]
(pm$pred[4]/lgnp[T])*100
pm = predict(m2, n.ahead = 4, newxreg = NULL,
se.fit = TRUE)
p4_lev = pm$pred[4]+lgnp[T]
par(mfrow=c(1,1))
plot(c(lgnp),type='l',lwd=2,xlim=c(0,T+5),
ylim=c(min(lgnp),1.2*max(lgnp)))
lines(naive$fitted.values,lty=23)
points(x = T+4, y = p4_lev,col=2,pch=20)
pm$pred[4]*100
rm(list=ls(all=TRUE))
set.seed(357)
library(stats)
## Simulate data
y0 = 0
T  = 100
y  = rep(NA,T)
e  = rnorm(T,0,1)
y[1] = 0.7*y0+e[1]
for(t in 2:T){
y[t] = 0.7*y[t-1]+e[t]
}
par(mfrow=c(1,3))
ts.plot(y)
acfs  = acf(y)
pacfs = pacf(y)
acfs
pacfs
## Box and Jenkins confidence intervals
## s=1
c(acfs$acf[2]-2*T^{-1/2},acfs$acf[2]+2*T^{-1/2})
## s=2
sd2 = sqrt(1/T*(1+2*acfs$acf[2]^2))
c(acfs$acf[3]-2*sd2,acfs$acf[3]+2*sd2)
m1 = arima(y, order = c(1, 0,0),fixed=c(NA,0))
m2 = arima(y, order = c(1, 0,3),fixed=c(NA,0,0,NA,0))
par(mfrow=c(2,2))
ts.plot(m1$residuals)
ts.plot(m2$residuals)
pacf(m1$residuals)
pacf(m2$residuals)
grid = seq(-4,4,length=500)
par(mfrow=c(1,2))
hist(m1$residuals/sqrt(m1$sigma2),freq=FALSE)
lines(grid,dnorm(grid))
hist(m2$residuals/sqrt(m2$sigma2))
lines(grid,dnorm(grid))
ks.test(m1$residuals/sqrt(m1$sigma2),dnorm)
ks.test(m2$residuals/sqrt(m2$sigma2),dnorm)
Box.test(m1$residuals, lag = 8, type = c("Ljung-Box"))
Box.test(m1$residuals, lag = 16, type = c("Ljung-Box"))
Box.test(m1$residuals, lag = 24, type = c("Ljung-Box"))
Box.test(m2$residuals, lag = 8, type = c("Ljung-Box"))
Box.test(m2$residuals, lag = 16, type = c("Ljung-Box"))
Box.test(m2$residuals, lag = 24, type = c("Ljung-Box"))
